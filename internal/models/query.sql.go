// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const downvoteCard = `-- name: DownvoteCard :one
insert into downvotes (
    card_id,
    user_id
) values (
    ?1,
    ?2
) returning id
`

type DownvoteCardParams struct {
	CardID int64
	UserID int64
}

func (q *Queries) DownvoteCard(ctx context.Context, arg DownvoteCardParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, downvoteCard, arg.CardID, arg.UserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCard = `-- name: GetCard :one
select id, name, description, user_id, created_at, updated_at, removed_at from cards where id = ?1 limit 1
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RemovedAt,
	)
	return i, err
}

const getCards = `-- name: GetCards :many
select id, name, description, user_id, created_at, updated_at, removed_at from cards
`

func (q *Queries) GetCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCardsByUser = `-- name: GetCardsByUser :many
select id, name, description, user_id, created_at, updated_at, removed_at from cards where user_id = ?1
`

func (q *Queries) GetCardsByUser(ctx context.Context, userID int64) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getCardsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComment = `-- name: GetComment :one
select id, content, card_id, user_id, comment_id, created_at, updated_at, removed_at from comments where id = ?1 limit 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CardID,
		&i.UserID,
		&i.CommentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RemovedAt,
	)
	return i, err
}

const getCommentsByCard = `-- name: GetCommentsByCard :many
select id, content, card_id, user_id, comment_id, created_at, updated_at, removed_at from comments where card_id = ?1
`

func (q *Queries) GetCommentsByCard(ctx context.Context, cardID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByCard, cardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CardID,
			&i.UserID,
			&i.CommentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByComment = `-- name: GetCommentsByComment :many
select id, content, card_id, user_id, comment_id, created_at, updated_at, removed_at from comments where comment_id = ?1
`

func (q *Queries) GetCommentsByComment(ctx context.Context, commentID sql.NullInt64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByComment, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CardID,
			&i.UserID,
			&i.CommentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUser = `-- name: GetCommentsByUser :many
select id, content, card_id, user_id, comment_id, created_at, updated_at, removed_at from comments where user_id = ?1
`

func (q *Queries) GetCommentsByUser(ctx context.Context, userID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CardID,
			&i.UserID,
			&i.CommentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDownvotesByCard = `-- name: GetDownvotesByCard :many
select count(*) from downvotes where card_id = ?1
`

func (q *Queries) GetDownvotesByCard(ctx context.Context, cardID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getDownvotesByCard, cardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDownvotesByUser = `-- name: GetDownvotesByUser :many
select id, card_id, user_id, created_at, updated_at, removed_at from downvotes where user_id = ?1
`

func (q *Queries) GetDownvotesByUser(ctx context.Context, userID int64) ([]Downvote, error) {
	rows, err := q.db.QueryContext(ctx, getDownvotesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Downvote
	for rows.Next() {
		var i Downvote
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpvotesByCard = `-- name: GetUpvotesByCard :many
select count(*) from upvotes where card_id = ?1
`

func (q *Queries) GetUpvotesByCard(ctx context.Context, cardID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getUpvotesByCard, cardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpvotesByUser = `-- name: GetUpvotesByUser :many
select id, card_id, user_id, created_at, updated_at, removed_at from upvotes where user_id = ?1
`

func (q *Queries) GetUpvotesByUser(ctx context.Context, userID int64) ([]Upvote, error) {
	rows, err := q.db.QueryContext(ctx, getUpvotesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upvote
	for rows.Next() {
		var i Upvote
		if err := rows.Scan(
			&i.ID,
			&i.CardID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select id, name, email, username, password, user_type_id, created_at, updated_at, removed_at from users where id = ?1 limit 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.UserTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RemovedAt,
	)
	return i, err
}

const insertCard = `-- name: InsertCard :one
insert into cards (
    name,
    description,
    user_id
) values (
    ?1,
    ?2,
    ?3
) returning id
`

type InsertCardParams struct {
	Name        string
	Description string
	UserID      int64
}

func (q *Queries) InsertCard(ctx context.Context, arg InsertCardParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertCard, arg.Name, arg.Description, arg.UserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertComment = `-- name: InsertComment :one
insert into comments (
    content,
    card_id,
    user_id,
    comment_id
) values (
    ?1,
    ?2,
    ?3,
    CASE
        WHEN ?4 = 0 THEN NULL
        ELSE ?4
    END
) returning id
`

type InsertCommentParams struct {
	Content   string
	CardID    int64
	UserID    int64
	CommentID interface{}
}

func (q *Queries) InsertComment(ctx context.Context, arg InsertCommentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertComment,
		arg.Content,
		arg.CardID,
		arg.UserID,
		arg.CommentID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const upvoteCard = `-- name: UpvoteCard :one
insert into upvotes (
    card_id,
    user_id
) values (
    ?1,
    ?2
) returning id
`

type UpvoteCardParams struct {
	CardID int64
	UserID int64
}

func (q *Queries) UpvoteCard(ctx context.Context, arg UpvoteCardParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, upvoteCard, arg.CardID, arg.UserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
